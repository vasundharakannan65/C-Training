using System;

namespace Stack
{
    class Program
    {
        static void Main(string[] args)
        {
            
            Stack s1 = new Stack();
            s1.EmptyOrNot();

            //operator overloading - push()
            s1 += 1;
            s1 += 2;
            s1 += 3;
            s1 += 4;
            s1 += 5;
            s1 += 6;

            s1.Display();

            s1.EmptyOrNot(); 

            s1.Pop();

            s1.Pop(); 

            s1.Display();

            
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Stack
{
    class Stack
    {
        public int MyTop { get; set; }

        static readonly int Len = 100;

        int[] stack = new int[Len]; 

        public Stack()
        {
            this.MyTop = -1;
        }


        //to check if stack is empty or not
        public void EmptyOrNot()
        {
            var myResult = (MyTop < 0) ? "Stack is empty" : "Stack is not empty";
            Console.WriteLine(myResult);
        }

        //operator overloading
        public static Stack operator +(Stack s,int n)
        {
            s.stack[++s.MyTop] = n;
            return s;
        }

        //public void Push(int ele)
        //{
        //    if (MyTop >= Len)
        //        Console.WriteLine("Stack overflow");
        //    else
        //        stack[++MyTop] = ele;
        //} 
        
        //to pop the last ele in stack
        public void Pop()
        {   
            if(MyTop < 0)
                Console.WriteLine("Stack underflow");
            else
            {
                int value = stack[MyTop--];
                Console.WriteLine($"Popped element: {value}");
            }
        } 


        public void Display()
        {
            Console.WriteLine("Displaying stack");
            for (int i = MyTop; i >= 0; i--)
                Console.WriteLine(stack[i]+" ");
            
        }
    }
}
